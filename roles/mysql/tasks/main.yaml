- name: Install mysql server and pymysql
  ansible.builtin.apt:
    name:
    - mysql-server
    - python3-pymysql
    state: present

- name: Start and enable mysql service
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: yes

- name: Create a mysql database for agama
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Restart mysql

- name: Create a mysql user agama
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Restart mysql

- name: Bind mysql server to public interface
  ansible.builtin.template:
    src: ../templates/override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
  notify:
    - Restart mysql

- name: Create a mysql user replication
  community.mysql.mysql_user:
    name: "{{ mysql_replication_user }}"
    password: "{{ mysql_replication_pass }}"
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Restart mysql

- name: MySQL replica read only mode ON
  community.mysql.mysql_variables:
    variable: read_only
    value: 'ON'
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  when: inventory_hostname != mysql_host
  notify:
    - Reset MySQL source
    - Reset MySQL replica
  tags: mx

- name: MySQL replica read only mode OFF
  community.mysql.mysql_variables:
    variable: read_only
    value: 'OFF'
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  when: inventory_hostname == mysql_host
  notify:
    - Reset MySQL source
    - Reset MySQL replica
  tags: mx